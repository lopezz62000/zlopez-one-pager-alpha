{"ast":null,"code":"import { ONE_PAGERS_ALL_DATA_MAP, ONE_PAGERS_PUBLIC_DATA_ARRAY, ONE_PAGERS_PUBLIC_TAGS_ARRAY } from './onepagers';\n/**\n * This is a mock service that doesn't call a backend, and\n * the resolve time is meant to mock a delay for retrieving data\n * remotely. Feel free to alter this resolve time to render the\n * page faster during development.\n **/\n\nconst RESOLVE_TIME_MS = 1000;\n/** Return all public One Pager data. */\n\nexport const getAllPublicOnePagerData = () => Promise.resolve(ONE_PAGERS_PUBLIC_DATA_ARRAY);\n/** Return all public One Pager tags. */\n\nexport const getAllPublicOnePagerTags = () => ONE_PAGERS_PUBLIC_TAGS_ARRAY;\n/** Return a single One Pager with all data. */\n\nexport const getOnePagerData = url => new Promise(resolve => setTimeout(() => resolve(ONE_PAGERS_ALL_DATA_MAP.get(url)), RESOLVE_TIME_MS));","map":{"version":3,"sources":["/Users/zlopez/Desktop/OnePager-Alpha/zlopez-one-pager-alpha/data/dataService.ts"],"names":["ONE_PAGERS_ALL_DATA_MAP","ONE_PAGERS_PUBLIC_DATA_ARRAY","ONE_PAGERS_PUBLIC_TAGS_ARRAY","RESOLVE_TIME_MS","getAllPublicOnePagerData","Promise","resolve","getAllPublicOnePagerTags","getOnePagerData","url","setTimeout","get"],"mappings":"AACA,SACEA,uBADF,EAEEC,4BAFF,EAGEC,4BAHF,QAIO,aAJP;AAMA;;;;;;;AAMA,MAAMC,eAAe,GAAG,IAAxB;AAEA;;AACA,OAAO,MAAMC,wBAAwB,GAAG,MACtCC,OAAO,CAACC,OAAR,CAAgBL,4BAAhB,CADK;AAGP;;AACA,OAAO,MAAMM,wBAAwB,GAAG,MACxCL,4BADO;AAGP;;AACA,OAAO,MAAMM,eAAe,GAAIC,GAAD,IAC7B,IAAIJ,OAAJ,CAAaC,OAAD,IACVI,UAAU,CAAC,MAAMJ,OAAO,CAACN,uBAAuB,CAACW,GAAxB,CAA4BF,GAA5B,CAAD,CAAd,EAAkDN,eAAlD,CADZ,CADK","sourcesContent":["import { OnePagerData, OnePagerPublicData} from '../model/model';\nimport {\n  ONE_PAGERS_ALL_DATA_MAP,\n  ONE_PAGERS_PUBLIC_DATA_ARRAY,\n  ONE_PAGERS_PUBLIC_TAGS_ARRAY,\n} from './onepagers';\n\n/**\n * This is a mock service that doesn't call a backend, and\n * the resolve time is meant to mock a delay for retrieving data\n * remotely. Feel free to alter this resolve time to render the\n * page faster during development.\n **/\nconst RESOLVE_TIME_MS = 1000;\n\n/** Return all public One Pager data. */\nexport const getAllPublicOnePagerData = (): Promise<OnePagerPublicData[]> =>\n  Promise.resolve(ONE_PAGERS_PUBLIC_DATA_ARRAY);\n\n/** Return all public One Pager tags. */\nexport const getAllPublicOnePagerTags = (): Array<String> =>\nONE_PAGERS_PUBLIC_TAGS_ARRAY;\n\n/** Return a single One Pager with all data. */\nexport const getOnePagerData = (url: string): Promise<OnePagerData> =>\n  new Promise((resolve) =>\n    setTimeout(() => resolve(ONE_PAGERS_ALL_DATA_MAP.get(url)), RESOLVE_TIME_MS)\n  );\n"]},"metadata":{},"sourceType":"module"}